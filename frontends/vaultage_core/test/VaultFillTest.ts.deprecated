import { Vault, ApiCallFunction } from '../src/Vault';
import { VaultageError, ERROR_CODE } from '../src/VaultageError';
import { SaltsConfig } from '../src/Crypto';
import * as request from 'request';


let salts : SaltsConfig = { LOCAL_KEY_SALT: "deadbeef", REMOTE_KEY_SALT: "0123456789"};

let apiCallsFired: any[] = [];
let mockAPI : ApiCallFunction = (parameters: any, cb: (err: any, resp: any)=>void) => {
    apiCallsFired.push({'parameters': parameters, 'cb': cb});
    
};

let callbacksFired : any[] = [];
let errorCb = (err: VaultageError, vault: Vault) => {
    console.log("Callback called", err)
    callbacksFired.push({'err': err, 'vault': vault});
}

describe('Vault.ts can', () => {

    beforeEach(function(done) {
        setTimeout(function() {
            done();
        }, 10);
    });

    it('can create a Vault with a mock API, which interacts with a server', (done) => {
        apiCallsFired = [];
        callbacksFired = [];

        let nMessage = 0;
        let vault : Vault;

        let realAPI : ApiCallFunction = (parameters: any, cb: (err: any, resp: any)=>void) => {
            console.log("Sending request....")
            console.log(parameters)
            request(parameters, function (error, response, body) {
                console.log('error:', error); // Print the error if one occurred
                console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
                console.log('body:', body); // Print the HTML for the Google homepage.
                cb(error, response);
                nMessage++;
                if(nMessage == 2){
                    done();
                } else {
                    //add one entry
                    vault.addEntry({
                        title: "Hello",
                        login: "Bob",
                        password: "zephyr",
                        url: "http://example.com"
                    });

                    vault.save(errorCb);
                }
              });
        };

        vault = new Vault(salts, realAPI);

        vault.auth("http://localhost:8080", "lbarman", "passwd", errorCb);
    });

});